---
import Viewport from "./Viewport.astro";

interface Props {
  initialSlide?: number;
}

const { initialSlide } = Astro.props;
---

<div
  data-astro-slides-presentation
  data-astro-slides-current={initialSlide}
  class="w-full h-full relative flex justify-center items-center font-sans"
>
  <Viewport>
    <slot />
  </Viewport>
</div>

<script>
  interface HTMLPresentationElement extends HTMLElement {
    astroSlides: {
      presentation: PresentationController;
    };
  }

  const DATA_ATTR_PREFIX = "data-astro-slides";
  const PRESENTATION_SELECTOR = `[${DATA_ATTR_PREFIX}-presentation]`;
  const SLIDE_SELECTOR = `[${DATA_ATTR_PREFIX}-slide]`;

  const DATASET_SLIDES_CURRENT = "astroSlidesCurrent";

  const EVENT_PREFIX = "astro-slides";
  const EVENT_NEXT_SLIDE = `${EVENT_PREFIX}:next-slide`;
  const EVENT_PREV_SLIDE = `${EVENT_PREFIX}:prev-slide`;
  const EVENT_SLIDE_CHANGED = `${EVENT_PREFIX}:slide-changed`;

  export class PresentationController {
    private elem: HTMLPresentationElement;
    private slides: HTMLElement[];
    private cachedDisplay: string[];

    static initialize(elem: HTMLPresentationElement) {
      const presentation = new PresentationController(elem);
      elem.astroSlides = { presentation };
    }

    private constructor(elem: HTMLPresentationElement) {
      this.elem = elem;
      this.slides = Array.from(this.elem.querySelectorAll(SLIDE_SELECTOR));
      this.cachedDisplay = Array.from(this.slides).map(
        (slide) => slide.style.display
      );

      document.addEventListener(EVENT_NEXT_SLIDE, this.handleNextSlide);
      document.addEventListener(EVENT_PREV_SLIDE, this.handlePreviousSlide);

      document.addEventListener("keyup", (event) => {
        if (event.key === "ArrowLeft") {
          document.dispatchEvent(new CustomEvent(EVENT_PREV_SLIDE));
        } else if (event.key === "ArrowRight") {
          document.dispatchEvent(new CustomEvent(EVENT_NEXT_SLIDE));
        }
      });
    }

    changeSlide() {
      const currentSlide = this.elem.dataset[DATASET_SLIDES_CURRENT] || "0";
      if (currentSlide != null) {
        const slideIndex = parseInt(currentSlide, 10);
        if (!isNaN(slideIndex)) {
          this.slides.forEach((slide, index) => {
            if (index === slideIndex) {
              slide.style.display = this.cachedDisplay[index];
            } else {
              slide.style.display = "none";
            }
          });
        }
      }

      document.dispatchEvent(
        new CustomEvent(EVENT_SLIDE_CHANGED, {
          detail: {
            currentSlide: this.elem.dataset[DATASET_SLIDES_CURRENT],
            totalSlides: this.slides.length.toString(),
          },
        })
      );
    }

    handlePreviousSlide = () => {
      const currentSlide = this.elem.dataset[DATASET_SLIDES_CURRENT] || "0";
      const slideIndex = parseInt(currentSlide, 10);
      if (!isNaN(slideIndex) && slideIndex > 0) {
        this.elem.dataset[DATASET_SLIDES_CURRENT] = (slideIndex - 1).toString();
      }
      this.changeSlide();
    };

    handleNextSlide = () => {
      const currentSlide = this.elem.dataset[DATASET_SLIDES_CURRENT] || "0";
      let slideIndex = parseInt(currentSlide, 10);
      if (isNaN(slideIndex)) {
        slideIndex = 0;
      }
      if (slideIndex + 1 < this.slides.length) {
        this.elem.dataset[DATASET_SLIDES_CURRENT] = (slideIndex + 1).toString();
      }
      this.changeSlide();
    };
  }

  window.addEventListener("load", () => {
    document
      .querySelectorAll(PRESENTATION_SELECTOR)
      .forEach((elem) =>
        PresentationController.initialize(elem as HTMLPresentationElement)
      );
  });
</script>
