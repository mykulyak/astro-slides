---
interface Props {
  class?: string;
}

const { class: userClass } = Astro.props;
---

<div
  data-astro-slides-viewport
  class={`w-full h-full flex items-center justify-center ${userClass || ""}`}
>
  <slot />
</div>

<style is:global>
  [data-astro-slides-viewport] > * {
    width: var(--as-slide-width);
    height: var(--as-slide-height);
    min-width: var(--as-slide-width);
    min-height: var(--as-slide-height);
    max-width: var(--as-slide-width);
    max-height: var(--as-slide-height);
    transform: scale(var(--as-scale));
  }
</style>

<script>
  function astroSlidesRescaleViewports() {
    document
      .querySelectorAll("[data-astro-slides-viewport]")
      .forEach((elem) => {
        const htmlElem = elem as HTMLElement;

        const SLIDE_WIDTH = 1600;
        const SLIDE_HEIGHT = 900;
        const SLIDE_ASPECT_RATIO = SLIDE_WIDTH / SLIDE_HEIGHT;

        const CSS_SLIDE_WIDTH = "--as-slide-width";
        const CSS_SLIDE_HEIGHT = "--as-slide-height";
        const CSS_SCALE = "--as-scale";

        const elemWidth = htmlElem.clientWidth;
        const elemHeight = htmlElem.clientHeight;
        const elemAspectRatio = elemWidth / elemHeight;

        const scale =
          elemAspectRatio < SLIDE_ASPECT_RATIO
            ? elemWidth / SLIDE_WIDTH
            : elemHeight / SLIDE_HEIGHT;

        htmlElem.style.setProperty(CSS_SLIDE_WIDTH, `${SLIDE_WIDTH}px`);
        htmlElem.style.setProperty(CSS_SLIDE_HEIGHT, `${SLIDE_HEIGHT}px`);
        htmlElem.style.setProperty(CSS_SCALE, `${scale}`);
      });
  }

  window.addEventListener("load", astroSlidesRescaleViewports);
  window.addEventListener("resize", astroSlidesRescaleViewports);
</script>
